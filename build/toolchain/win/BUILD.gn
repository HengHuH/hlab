# This file is part of the GN build system for hlab.

# import("//build/toolchain/win/settings.gni")
import ("//build/toolchain/toolchain.gni")

# Should only be running on Windows.
assert(is_win)

template("msvc_toolchain") {
  toolchain(target_name) {
    assert(defined(invoker.toolchain_args))

    toolchain_args = {
      if (defined(invoker.toolchain_args)) {
        forward_variables_from(invoker.toolchain_args, "*")
      }
    }

    object_subdir = "{{target_out_dir}}/{{label_name}}"

    cl = "cl.exe"
    link = "link.exe"
    lib = "lib.exe"

    show_includes = ""

    tool("cc") {
      precompiled_header_type = "msvc"
      pdbname = "{{target_out_dir}}/{{label_name}}_c.pdb"

      # Label names may have spaces in them so the pdbname must be quoted. The
      # source and output don't need to be quoted because GN knows they're a
      # full file name and will quote automatically when necessary.
      depsformat = "msvc"
      description = "CC {{output}}"
      outputs = [ "$object_subdir/{{source_name_part}}.obj" ]

      command = "$cl /c {{source}} /nologo $show_includes {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} /Fo{{output}} /Fd\"$pdbname\""
    }

    tool("cxx") {
      precompiled_header_type = "msvc"

      # The PDB name needs to be different between C and C++ compiled files.
      pdbname = "{{target_out_dir}}/{{label_name}}_cc.pdb"

      # See comment in CC tool about quoting.
      depsformat = "msvc"
      description = "CXX {{output}}"
      outputs = [ "$object_subdir/{{source_name_part}}.obj" ]

      command = "$cl /c {{source}} /Fo{{output}} /nologo $show_includes {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} /Fd\"$pdbname\""
    }

    tool("alink") {
      rspfile = "{{output}}.rsp"
      command = "$lib /OUT:{{output}} /nologo {{arflags}} @$rspfile"
      description = "LIB {{output}}"
      outputs = [
        # Ignore {{output_extension}} and always use .lib, there is no reason to
        # allow targets to override the extension on Windows.
        "{{output_dir}}/{{target_output_name}}.lib",
      ]
      default_output_extension = ".lib"
      default_output_dir = "{{target_out_dir}}"
      rspfile_content = "{{inputs_newline}}"
    }

    tool("solink") {
      # E.g. "foo.dll":
      dllname = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
      libname = "${dllname}.lib"
      pdbname = "${dllname}.pdb"
      rspfile = "${dllname}.rsp"

      pool = "//build/toolchain:link_pool($default_toolchain)"

      command = "$link /OUT:$dllname /nologo /IMPLIB:$libname /DLL /PDB:$pdbname @$rspfile"

      default_output_extension = ".dll"
      default_output_dir = "{{root_out_dir}}"
      description = "LINK(DLL) {{output}}"
      outputs = [
        dllname,
        libname,
        pdbname,
      ]
      link_output = libname
      depend_output = libname
      runtime_outputs = [
        dllname,
        pdbname,
      ]

      # Since the above command only updates the .lib file when it changes, ask
      # Ninja to check if the timestamp actulaly changed to know if downstream
      # dependencies should be recompiled.
      restat = true

      # The use of inputs_newline is to work arround a fixed per-line buffer
      # size in the linker.
      rspfile_content = "{{libs}} {{solibs}} {{inputs_newline}} {{ldflags}} {{rlibs}}"
    }

    tool("link") {
      # shlib_extension
      exename = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
      pdbname = "$exename.pdb"
      rspfile = "$exename.rsp"

      pool = "//build/toolchain:link_pool($default_toolchain)"

      command = "$link /OUT:$exename /nologo /PDB:$pdbname @$rspfile"

      default_output_dir = "{{root_out_dir}}"
      default_output_extension = ".exe"
      description = "LINK {{output}}"
      outputs = [
        exename,
        pdbname,
      ]

      runtime_outputs = outputs

      # The use of inputs_newline is to work aroud a fixed per-line buffer
      # size in the linker
      rspfile_content = "{{inputs_newline}} {{libs}} {{solibs}} {{ldflags}} {{rlibs}}"
    }

    tool("stamp") {
      command = stamp_command
      description = stamp_description
      pool = "//build/toolchain:action_pool($default_toolchain)"
    }

    tool("copy") {
      command = copy_command
      description = copy_description
      pool = "//build/toolchain:action_pool($default_toolchain)"
    }

    tool("action") {
      pool = "//build/toolchain:action_pool($default_toolchain)"
    }
  }
}

msvc_toolchain("x64") {
  toolchain_args = {
    current_cpu = "win"
    current_os = "x64"
  }
}
